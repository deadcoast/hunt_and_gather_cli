import argparse
from unittest.mock import patch

# Generated by CodiumAI

from src.main import HuntCLI

import pytest


class Test__Init__:

    #  Initializes an instance of HuntCLI with valid arguments
    def test_valid_arguments(self):
        args = argparse.Namespace(command='gather', file='example.txt', dir='documents', editor='vscode')
        with patch('argparse.ArgumentParser.parse_args', return_value=args):
            cli = HuntCLI()
            assert isinstance(cli, HuntCLI)

    #  Calls the appropriate method based on the provided command argument
    def test_command_gather(self, mocker):
        args = argparse.Namespace(command='gather', file='example.txt', dir='documents', editor='vscode')
        with patch('argparse.ArgumentParser.parse_args', return_value=args):
            cli = self._extracted_from_test_map_command_4(mocker, 'gather')
            cli.gather.assert_called_once_with('example.txt', 'documents')

    #  Successfully executes the 'gather' command with valid arguments
    def test_gather_command_valid_arguments(self, mocker):
        args = argparse.Namespace(command='gather', file='example.txt', dir='documents', editor='vscode')
        with patch('argparse.ArgumentParser.parse_args', return_value=args):
            cli = self._extracted_from_test_map_command_4(mocker, 'gather')
            cli.gather.assert_called_once_with('example.txt', 'documents')

    #  Successfully executes the 'map' command
    def test_map_command(self, mocker):
        args = argparse.Namespace(command='map', file='example.txt', dir='documents', editor='vscode')
        with patch('argparse.ArgumentParser.parse_args', return_value=args):
            cli = self._extracted_from_test_map_command_4(mocker, 'map')
            cli.map.assert_called_once()

    # TODO Rename this here and in `test_command_gather`, `test_gather_command_valid_arguments` and `test_map_command`
    def _extracted_from_test_map_command_4(self, mocker, arg1):
        result = HuntCLI()
        mocker.patch.object(result, arg1)
        result.__init__()
        return result

    #  Raises an error when an invalid command is provided
    def test_invalid_command(self):
        args = argparse.Namespace(command='invalid', file='example.txt', dir='documents', editor='vscode')
        with patch('argparse.ArgumentParser.parse_args', return_value=args):
            cli = HuntCLI()
            with pytest.raises(AttributeError):
                cli.__init__()

    #  Raises an error when the 'gather' command is executed without a filename argument
    def test_gather_command_no_filename(self):
        args = argparse.Namespace(command='gather', dir='documents', editor='vscode')
        with patch('argparse.ArgumentParser.parse_args', return_value=args):
            cli = HuntCLI()
            with pytest.raises(TypeError):
                cli.__init__()

    #  Raises an error when the 'gather' command is executed without a directory argument
    def test_gather_command_no_directory(self):
        args = argparse.Namespace(command='gather', file='example.txt', editor='vscode')
        with patch('argparse.ArgumentParser.parse_args', return_value=args):
            cli = HuntCLI()
            with pytest.raises(TypeError):
                cli.__init__()

    #  Raises an error when the 'skin' command is executed without a filename argument
    def test_skin_command_no_filename(self):
        args = argparse.Namespace(command='skin', dir='documents', editor='vscode')
        with patch('argparse.ArgumentParser.parse_args', return_value=args):
            cli = HuntCLI()
            with pytest.raises(TypeError):
                cli.__init__()

    #  Raises an error when the 'butcher' command is executed without a filename argument
    def test_butcher_command_no_filename(self):
        args = argparse.Namespace(command='butcher', dir='documents', editor='vscode')
        with patch('argparse.ArgumentParser.parse_args', return_value=args):
            cli = HuntCLI()
            with pytest.raises(TypeError):
                cli.__init__()
