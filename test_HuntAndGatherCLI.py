from autopage import argparse

# Generated by CodiumAI

from main import HuntAndGatherCLI

# Dependencies:
# pip install pytest-mock
import pytest


class TestHuntAndGatherCLI:

    #  CLI command 'map' navigates to the specified menu
    def test_map_navigates_to_specified_menu(self, mocker):
        cli = HuntAndGatherCLI()
        mocker.patch('argparse.ArgumentParser.parse_args', return_value=argparse.Namespace(command='map', cabin=True))
        mocker.patch.object(cli, 'map')

        cli.map()

        cli.map.assert_called_with(cabin=True)

    #  CLI command 'skin' processes the specified file for skinning
    def test_skin_processes_specified_file_for_skinning(self, mocker):
        cli = HuntAndGatherCLI()
        mocker.patch('argparse.ArgumentParser.parse_args',
                     return_value=argparse.Namespace(command='skin', file='test.txt', clean=False, cabin=False))
        mocker.patch.object(cli, 'skin')

        cli.skin()

        cli.skin.assert_called_with(file='test.txt', clean=False, cabin=False)

    #  CLI command 'tan' attempts to insert correct variables into the specified file
    def test_tan_attempts_to_insert_correct_variables_into_specified_file(self, mocker):
        cli = HuntAndGatherCLI()
        mocker.patch('argparse.ArgumentParser.parse_args',
                     return_value=argparse.Namespace(command='tan', file='test.txt'))
        mocker.patch.object(cli, 'tan')

        cli.tan()

        cli.tan.assert_called_with(file='test.txt')

    #  CLI command 'tailor' opens the specified file in the specified editor
    def test_tailor_opens_specified_file_in_specified_editor(self, mocker):
        cli = HuntAndGatherCLI()
        mocker.patch('argparse.ArgumentParser.parse_args',
                     return_value=argparse.Namespace(command='tailor', file='test.txt', editor='vim'))
        mocker.patch.object(cli, 'tailor')

        cli.tailor()

        cli.tailor.assert_called_with(file='test.txt', editor='vim')

    #  CLI command 'map' with no arguments returns to the main menu
    def test_map_with_no_arguments_returns_to_main_menu(self, mocker):
        cli = HuntAndGatherCLI()
        mocker.patch('argparse.ArgumentParser.parse_args', return_value=argparse.Namespace(command='map'))
        mocker.patch.object(cli, 'unknown_command')

        cli.map()

        cli.unknown_command.assert_called_once()

    #  CLI command 'skin' with '--clean' argument removes placeholders and leaves the file blank
    def test_skin_with_clean_argument_removes_placeholders_and_leaves_file_blank(self, mocker):
        cli = HuntAndGatherCLI()
        mocker.patch('argparse.ArgumentParser.parse_args',
                     return_value=argparse.Namespace(command='skin', file='test.txt', clean=True, cabin=False))
        mocker.patch.object(cli, 'skin')

        cli.skin()

        cli.skin.assert_called_with(file='test.txt', clean=True, cabin=False)

    #  CLI command 'skin' with '--cabin' argument returns to the main menu after processing
    def test_skin_with_cabin_argument_returns_to_main_menu_after_processing(self, mocker):
        cli = HuntAndGatherCLI()
        mocker.patch('argparse.ArgumentParser.parse_args',
                     return_value=argparse.Namespace(command='skin', file='test.txt', clean=False, cabin=True))
        mocker.patch.object(cli, 'skin')

        cli.skin()

        cli.skin.assert_called_with(file='test.txt', clean=False, cabin=True)

    #  CLI command 'tailor' with an invalid editor choice raises an error
    def test_tailor_with_invalid_editor_choice_raises_error(self, mocker):
        cli = HuntAndGatherCLI()
        mocker.patch('argparse.ArgumentParser.parse_args',
                     return_value=argparse.Namespace(command='tailor', file='test.txt', editor='invalid'))
        mocker.patch.object(cli, 'unknown_command')

        cli.tailor()

        cli.unknown_command.assert_called_once()

    #  CLI command with no arguments returns to the main menu
    def test_command_with_no_arguments_returns_to_main_menu(self, mocker):
        cli = HuntAndGatherCLI()
        mocker.patch('argparse.ArgumentParser.parse_args', return_value=argparse.Namespace())
        mocker.patch.object(cli, 'unknown_command')

        cli.unknown_command()

        cli.unknown_command.assert_called_once()
